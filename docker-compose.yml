version: '3.1'
services:
  ms-pedido-api:
    image: wolwer/ms-pedido-api
    depends_on:
      - mongodb
      - kafka
    networks:
      - kong-net
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:my-secret-pw@mongodb:27017/pedidos?authSource=admin
      SPRING_PROFILES_ACTIVE: hom

  ms-admin-api:
    image: wolwer/ms-admin-api
    depends_on:
      - postgres-admin
      - kafka
    networks:
      - kong-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-admin:5432/admin
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: my-secret-pw
      SPRING_PROFILES_ACTIVE: hom

  ms-cliente-api:
    image: wolwer/ms-cliente-api
    depends_on:
      - postgres-cliente
      - kafka
    networks:
      - kong-net
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-cliente:5432/cliente
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: my-secret-pw
      SPRING_PROFILES_ACTIVE: hom

  postgres-cliente:
    image: postgres:latest
    container_name: postgres_cliente
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: my-secret-pw
      POSTGRES_DB: cliente
    ports:
      - "5432:5432"
    networks:
      - kong-net
    volumes:
      - postgres_cliente_data:/var/lib/postgresql/data

  postgres-admin:
    image: postgres:latest
    container_name: postgres_admin
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: my-secret-pw
      POSTGRES_DB: admin
    ports:
      - "5433:5432"
    networks:
      - kong-net
    volumes:
      - postgres_admin_data:/var/lib/postgresql/data

  mongodb:
    image: mongo:latest
    container_name: mongodb_pedidos
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: my-secret-pw
      MONGO_INITDB_DATABASE: pedidos
    ports:
      - "27017:27017"
    networks:
      - kong-net
    volumes:
      - mongodb_data:/data/db/
      - /etc/timezone:/etc/timezone:ro

  mongo-express:
    image: mongo-express:latest
    container_name: mongodb_express_pedidos
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongo
      ME_CONFIG_MONGODB_ADMINPASSWORD: my-secret-pw
      ME_CONFIG_MONGODB_SERVER: mongodb
      ME_CONFIG_MONGODB_URL: mongodb://mongo:my-secret-pw@mongo:27017/pedidos?authSource=admin
    ports:
      - "8070:8081"
    depends_on:
      - mongodb
    networks:
      - kong-net
  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - kong-net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kong-net

  kafka-manager:
    image: hlebalbau/kafka-manager:latest
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: letmein
    depends_on:
      - kafka
      - zookeeper
    networks:
      - kong-net

  kong-migrations:
    image: "kong:2.3.2-alpine"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: "kong:2.3.2-alpine"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    image: "kong:2.3.2-alpine"
    user: "kong"
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD: kong
    networks:
      - kong-net
    ports:
      - "8000:8000/tcp"
      - "8001:8001/tcp"
      - "8443:8443/tcp"
      - "8444:8444/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "kong" ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  konga-prepare:
    container_name: konga-prepare
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://kong:kong@db:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    depends_on:
      - db
      - konga

  konga:
    container_name: konga
    image: pantsel/konga:latest
    restart: always
    networks:
      - kong-net
    environment:
      DB_ADAPTER: postgres
      DB_HOST: db
      DB_USER: kong
      DB_PASSWORD: kong
      TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
      DB_DATABASE: konga_db
      NODE_ENV: production
      KONGA_HOOK_TIMEOUT: 120000
      KONGA_PROXY_LIST: "http://kong:8001"
    depends_on:
      - db
      - kong
    ports:
      - "1337:1337"

networks:
  kong-net: {}

volumes:
  postgres_cliente_data:
  postgres_admin_data:
  mongodb_data:
  kong_database_data:
  kong_data: {}
